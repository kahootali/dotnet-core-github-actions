name: CI

on:
  pull_request:
    branches:
      - main

jobs:
  Build-and-Push-Image:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Build and Push Image to Image registry
    env:
      REPO_NAME: ${{ github.event.repository.name }}
      ORGANIZATION_NAME: kahootali
      REGISTRY: docker.io
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v1
      - name: Initialize Pipeline
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: "@${{ github.actor }} GitHub Actions has started building this code. Check status at 'https://github.com/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }}/checks'"
          allow-repeats: false
      - name: Generate Version
        id: generate_version
        run: |
          # Just Tag
          IMAGE_TAG=pr-${{ github.event.pull_request.number }}-$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-8)
          # Just Image name
          IMAGE_NAME=$ORGANIZATION_NAME/$REPO_NAME
          #Image ID= Name + Tag
          IMAGE_ID=$IMAGE_NAME:$IMAGE_TAG
          IMAGE_REPO=$REGISTRY/$IMAGE_ID
          echo "Image: $IMAGE_REPO"
          echo "::set-output image=$IMAGE_REPO"
          echo "::set-output image_name=$IMAGE_NAME"
          echo REPO=$IMAGE_NAME >> $GITHUB_ENV
          echo IMAGE=$(echo "$REGISTRY/$IMAGE_ID") >> $GITHUB_ENV


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Echo Output
        run: |
          echo "Image from Output: ${{ steps.generate_version.outputs.image }}"
          echo "Image from Env:  ${{ env.IMAGE }}"
          echo "Repo from Env:  ${{ env.REPO }}"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          pull: true
          push: true
          build-args: BUILD_PARAMETERS=${{ env.BUILD_PARAMETERS }}
          cache-to: type=inline
          tags: ${{ env.IMAGE }}
          
          #$REGISTRY/$ORGANIZATION_NAME/$REPO_NAME:pr-${{ github.event.pull_request.number }}-$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-8)
            
      - name: Comment on PR
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: '@${{ github.actor }} Image is available for testing. `docker pull ${{ github.repository }}:${{ steps.generate_tag.outputs.GIT_TAG }}`'
          allow-repeats: false

      - name: Notify Failure
        if: failure()
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: '@${{ github.actor }} The pipeline failed! You better fix it before anyone else finds out! [Build](https://github.com/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }}/checks) has Failed!'
          allow-repeats: false